extends /layout/default

block beforehtml
  -
    title = '分享 LINE 數位版名片'
    description = '請開啟本連結並按一下「選擇分享對象」來透過 LINE 分享名片'

block style
  meta(property="og:image:height", content="315")
  meta(property="og:image:width", content="600")
  meta(property="og:image", content="https://i.imgur.com/PqLcIKj.png")
  meta(property="og:url", content=`https://liff.line.me/${liffidFull}/share.html`)
  link(rel="stylesheet", href="https://cdn.jsdelivr.net/gh/PamornT/flex2html@main/css/flex2html.css")
  style
    :sass
      [v-cloak]
        display: none

block content
  #app.container.my-4.text-monospace(v-cloak)
    h3.my-3.text-center= title
    .form-group.my-3
      button.btn.btn-lg.btn-success.btn-block.my-2.d-flex.justify-content-center.align-items-center(type="button", @click="btnShare") #[i.fa.mr-2.fa-share-square-o] 分享好友
      small.form-text.text-muted 按一下「分享好友」按鈕，可以分享給好友或群組。
    .form-group.my-3
      button.btn.btn-lg.btn-info.btn-block.my-2.d-flex.justify-content-center.align-items-center(type="button", @click="btnSend") #[i.fa.mr-2.fa-paper-plane-o] 直接傳送
      small.form-text.text-muted 按一下「直接傳送」按鈕，可以直接傳送到聊天室。
    .form-group.my-3
      .input-group.input-group-lg
        input.form-control(type="text", :value="liffLink", ref="result", readonly, @click="btnCopy")
        .input-group-append
          button.btn.btn-outline-secondary.d-flex.justify-content-center.align-items-center(type="button", @click="btnCopy") #[i.fa.mr-2.fa-clipboard] 複製網址
      small.form-text.text-muted 按一下「複製網址」按鈕，然後存到 LINE Keep。
    .dropdown.my-3
      button.btn.btn-lg.btn-secondary.btn-block.dropdown-toggle(type="button", data-toggle="dropdown") 點此查看更多功能
      .dropdown-menu
        a.dropdown-item(target="_blank", href="https://line.me/R/nv/QRCodeReader") #[i.fa.fa-fw.fa-qrcode] 點此掃描「行動條碼」
        a.dropdown-item(target="_blank", href="https://line.me/R/nv/addFriends") #[i.fa.fa-fw.fa-address-card] 點此前往「加入好友」
        a.dropdown-item(target="_blank", href="https://line.me/R/nv/keep") #[i.fa.fa-fw.fa-bookmark] 點此前往「LINE Keep」
        a.dropdown-item(target="_blank", href="https://fb.me/taichunmin") #[i.fa.fa-fw.fa-facebook-official] 透過 Facebook 與開發者聯絡
        button.dropdown-item(type="button", @click="btnFriendMissing") #[i.fa.fa-fw.fa-question-circle] 在「分享好友」中找不到好友？
    .table-responsive(style="background-color: #849ebf")
      .chatbox.pt-3
        #flex2html(ref="flex2html")

block script
  script(src="https://static.line-scdn.net/liff/edge/2/sdk.js")
  script(src="https://cdn.jsdelivr.net/gh/PamornT/flex2html@main/js/flex2html.min.js")
  script.
    /* global decodeBase64url */
    const loginPromise = (async () => {
      await liff.init({ liffId: '#{liffidFull}' })
      if (window.getSearchParam('liff.state')) await new Promise(resolve => {}) // 永遠不會結束的 Promise
      if (!liff.isLoggedIn()) {
        liff.login({ redirectUri: location.href })
        await new Promise(resolve => {}) // 永遠不會結束的 Promise
      }
      let profile
      try {
        profile = await liff.getProfile()
      } catch (err) {}
      window.gtagInit(_.get(profile, 'userId'))
      return profile
    })()
    window.vueConfig = {
      el: '#app',
      data: {
        liffLink: null,
        msgs: null,
        render: null,
        vcard: null,
      },
      async mounted () {
        try {
          this.showLoading('請稍候', '頁面初始化中')
          await loginPromise
          window.gtagScreenView('瀏覽分享名片網頁')
          window.gtagTiming('after loginPromise')
          this.liffLink = liff.permanentLink.createUrl()
          await Promise.all([
            this.getTpl(),
            this.getVcard(),
          ])
          this.msgs = this.getRenderedMsgs()
          console.log(this.msgs)
          for (const msg of this.msgs) {
            window.flex2html('flex2html', msg)
          }
          this.hideLoading()
          window.gtagTiming('after mounted')
          await this.showSavedAlert()
        } catch (err) {
          err.message = _.get(err, 'response.data.message', err.message)
          console.error(err)
          window.gtagError(err, true)
          await Swal.fire({ icon: 'error', title: '頁面初始化失敗', text: err.message })
        }
      },
      methods: {
        async getTpl () {
          try {
            const tpl = this.paramBase64url('template')
            if (!tpl) throw new Error('template is required.')
            this.render = _.template(_.get(await axios.get(tpl, {
              params: { cachebust: +new Date() },
              transformResponse: [],
            }), 'data'))
            if (!_.isFunction(this.render)) throw new Error('')
            window.gtagTiming('after getTpl')
          } catch (err) {
            err.message = err.message ? `名片樣板獲取失敗: ${err.message}` : '名片樣板獲取失敗'
            this.render = null
            throw err
          }
        },
        async getVcard () {
          this.vcard = _.mapValues(_.omit(_.fromPairs([...new URL(location).searchParams]), [
            'code',
            'liffClientId',
            'liffRedirectUri',
            'state',
            'template',
          ]), decodeBase64url)
          window.gtagTiming('after getVcard')
        },
        async btnShare () {
          try {
            this.showLoading('請稍候', '正在分享名片…')
            window.gtagEvent('瀏覽分享名片網頁', 'btnShare', this.vcard.template)
            if (!liff.isApiAvailable('shareTargetPicker')) throw new Error('不支援 shareTargetPicker，請嘗試更新應用程式版本。')
            const beforeShare = new Date()
            const res = await liff.shareTargetPicker(this.msgs)
            if (_.get(res, 'status') !== 'success') throw new Error('使用者取消分享')
            const afterShare = new Date()
            await Swal.fire({ icon: 'success', title: '分享成功' })
            if (afterShare - beforeShare > 1e3) liff.closeWindow()
          } catch (err) {
            err.message = _.get(err, 'response.data.message', err.message)
            console.error(err)
            window.gtagError(err, true)
            await Swal.fire({ icon: 'error', title: '分享失敗', text: err.message })
          }
        },
        async btnSend () {
          try {
            this.showLoading('請稍候', '正在傳送名片…')
            window.gtagEvent('瀏覽分享名片網頁', 'btnSend', this.vcard.template)
            if (!this.canSendMessages()) throw new Error('請先按「複製網址」，然後在 LINE 聊天視窗內貼上並開啟該網址，才有辦法使用「直接傳送」功能喔！')
            await liff.sendMessages(this.msgs)
            await Swal.fire({ icon: 'success', title: '傳送成功' })
            liff.closeWindow()
          } catch (err) {
            err.message = _.get(err, 'response.data.message', err.message)
            console.error(err)
            window.gtagError(err, true)
            await Swal.fire({ icon: 'error', title: '傳送失敗', text: err.message })
          }
        },
        async btnCopy () {
          window.gtagEvent('瀏覽分享名片網頁', 'btnCopy', this.vcard.template)
          const copyText = this.$refs.result
          copyText.select()
          copyText.setSelectionRange(0, 999999) // For mobile devices
          document.execCommand('copy')
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
        async showSavedAlert () {
          const swalFire = window.parseJsonOrDefault(localStorage.getItem('swalFire'))
          localStorage.removeItem('swalFire')
          if (_.isNil(swalFire)) return
          await Swal.fire(swalFire)
        },
        async btnFriendMissing () {
          await Swal.fire({
            padding: '0',
            customClass: { actions: 'mt-0 mb-2', content: 'pt-3 px-3' },
            html: `<small class="text-left"><p>如果在「分享好友」的清單中找不到好友，你可以嘗試以下步驟：</p><ol><li>按一下「複製網址」按鈕</li><li>進到聊天室並「貼上」網址</li><li>在好友的聊天室中「開啟」名片網址</li><li>按一下「直接傳送」按鈕傳送名片</li><li>在好友的聊天室中「收回」名片網址</li></ol></small>`
          })
        },
        getRenderedMsgs () {
          let msg = JSON5.parse(this.render({
            _,
            CryptoJS,
            dayjs,
            liffLink: this.liffLink,
            Qs,
            vcard: this.vcard,
          }))
          if (_.includes(['bubble', 'carousel'], _.get(msg, 'type'))) {
            msg = { type: 'flex', altText: '請在手機上查看數位版名片。', contents: msg }
          }
          msg = _.castArray(msg)
          return msg
        },
        canSendMessages () {
          if (!liff.isInClient()) return false
          const contextType = _.get(liff.getContext(), 'type')
          if (!_.includes(['utou', 'room', 'group', 'square_chat'], contextType)) return false
          return true
        },
        paramBase64url (key) {
          const base64 = window.getSearchParam(key)
          return base64 ? decodeBase64url(base64) : null
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
        hideLoading () {
          Swal.close()
        },
      },
    }
  //- 給予修改 vueConfig 的機會
  block vue-config
  script.
    (async () => {
      if (_.isFunction(window.beforeVueCreate)) await window.beforeVueCreate()
      window.vm = new Vue(window.vueConfig)
    })()
